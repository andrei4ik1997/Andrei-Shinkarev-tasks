Explain each result of expressions in comments:
// Описать как работают следующие выражения:

1) 1 - '0' + 2
'0' преобразуется к числу-> 1 - 0 + 2 =3
Результат 3

2) 1 - '-0' + 2
'-0' преобразуется к числу-> 1 + 0 + 2 =3
Результат 3

3) 1 - '-0-' + 'NaN'
'-0-' преобразуется к числу-> 1 - NaN + 'NaN' 
1 - NaN -> NaN + 'NaN'
происхоит конкатанация строк ->'NaNNaN'
Результат 'NaNNaN'

4) 'b' + [NaN + 'ba', 'CC'] - {};
При сложении 'b' + [NaN + 'ba', 'CC'], [NaN + 'ba', 'CC'] вызавет toString ->'b' + 'NaNba,CC' - {}
'b' + 'NaNba,CC' - {} ->'bNaNba,CC' - {}
{} вызавет toString ->'bNaNba,CC' - '[object Object]'
Вычитание всегда преобразует к числу -> NaN-NaN = NaN
Результат NaN

5) [] + (()=>{});
[] и (()=>{}) вызавет toString  -> '' + '()=>{}' 
Результат '()=>{}'

6) [] + (()=>({}));
[] и (()=>({})) вызавет toString  -> '' + '()=>({})' 
Результат '()=>({})'

7) [] + (()=>({}))();
 (()=>({}))() функция вернет {} -> [] + {}
[] и {} вызавет toString -> '' + '[object Object]'
Результат '[object Object]'

8) [] + (() => new Object(123))()
[] вызавет toString ->'' + (() => new Object(123))()
(() => new Object(123))() создаст число 123  -> '' + 123
происхоит конкатанация строк
Результат '123'

9) {} + (() => new Object(123))()
{} считывается как блок-> (() => new Object(123))()
(() => new Object(123))() создаст число 123
Результат 123

10) (() => new Object(123))() + {}
(() => new Object(123))() создаст число 123  -> 123 + {}
{} вызавет toString ->123 + '[object Object]'
происхоит конкатанация строк
Результат '123[object Object]'

11) ({}).valueOf() + 1 
({}).valueOf() вернет {} , {} вызавет toString ->'[object Object]' + 1
происхоит конкатанация строк ->'[object Object]1'
Результат 'object2'

12) {} + 2 
{} считывается как блок и результат будет 2
Результат 2

13) typeof ({}).valueOf() + 2
({}).valueOf() вернет {}, typeof  {} будет 'object' -> 'object' + 2
происхоит конкатанация строк
Результат 'object2'

14) +{} 
{} вызавет toString ->+'[object Object]'
Унарный + преобразует стоку к числу -> NaN
Результат NaN

15) +{}+[]
{} вызавет toString -> +'[object Object]' + []
Унарный + преобразует стоку к числу -> NaN 
[] вызавет toString -> NaN + ''
происхоит конкатанация строк
Результат 'NaN'

16) +[]
[] вызавет toString -> +''
Унарный + преобразует стоку к числу
Результат 0

17) +[]+{}
[] вызавет toString -> +''+{}
Унарный + преобразует стоку к числу 0 + {}
{} вызавет toString -> 0+'[object Object]'
происхоит конкатанация строк
Результат '0[object Object]'

18) +[10, 1]+{}
[10, 1] вызавет toString-> +'10,1'+{}
Унарный + преобразует стоку к числу -> NaN +{}
{} вызавет toString -> NaN+'[object Object]'
происхоит конкатанация строк
Результат 'NaN[object Object]'

19) {} + [10]
{} считывается как блок->  +[10]
[10] вызавет toString-> +'10'
Унарный + преобразует стоку к числу
Результат 10
